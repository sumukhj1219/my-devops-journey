name: Deploy EC2 App

on:
  push:
    branches:
      - main 



jobs:
  build-and-deploy:
    runs-on: ubuntu-latest 

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Node.js 
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and Tag Docker Image
      run: |
        # Navigate to your application directory
        cd ec2-automation/ec2-app/
        # Define image name consistently
        DOCKER_IMAGE="sumukhjoshi/ec2-app" # Use your Docker Hub repo name
        IMAGE_TAG="${{ github.sha }}"
        # Build from the app directory (context is '.')
        docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} .
        docker tag ${DOCKER_IMAGE}:${IMAGE_TAG} ${DOCKER_IMAGE}:latest

    - name: Push Docker Image to Docker Hub
      run: |
        # Navigate back to the application directory
        cd ec2-automation/ec2-app/
        # Use the SAME image name
        DOCKER_IMAGE="sumukhjoshi/ec2-app" # Use your Docker Hub repo name
        IMAGE_TAG="${{ github.sha }}"
        docker push ${DOCKER_IMAGE}:${IMAGE_TAG}
        docker push ${DOCKER_IMAGE}:latest

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu 
        key: ${{ secrets.EC2_PRIVATE_KEY }} 
        script: |
          # Replace with your Docker Hub repo name (must match build/push)
          DOCKER_IMAGE="sumukhjoshi/ec2-app"
          IMAGE_TAG="latest" # Or use ${{ github.sha }} if you can pass it

          echo "Stopping and removing old container..."
          # Stop and remove the old container if it exists
          # Ensure the container name here matches what you use in docker run
          docker ps -a --filter "name=my-nextjs-container" --format "{{.ID}}" | xargs docker stop || true
          docker ps -a --filter "name=my-nextjs-container" --format "{{.ID}}" | xargs docker rm || true

          echo "Pulling new image: ${DOCKER_IMAGE}:${IMAGE_TAG}"
          docker pull ${DOCKER_IMAGE}:${IMAGE_TAG}

          echo "Starting new container..."
          # Ensure container name and port mapping are correct
          docker run -d --name my-nextjs-container -p 3000:3000 ${DOCKER_IMAGE}:${IMAGE_TAG}
          # Add a restart policy if you want the container to restart on reboots
          # docker run -d --name my-nextjs-container --restart always -p 3000:3000 ${DOCKER_IMAGE}:${IMAGE_TAG}

          echo "Deployment complete!"